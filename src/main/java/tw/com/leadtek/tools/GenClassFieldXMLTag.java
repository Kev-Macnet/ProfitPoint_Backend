/**
 * Created on 2021/1/27.
 */
package tw.com.leadtek.tools;

public class GenClassFieldXMLTag extends GenClassField {

  private String xmlTag;

  public String getXmlTag() {
    return xmlTag;
  }

  public void setXmlTag(String xmlTag) {
    this.xmlTag = xmlTag;
  }

  public String toJavaDeclareCode() {
    if (type != null && type.toUpperCase().equals("KEY")) {
      // 排除掉複合 KEY 的 sql，如：  PRIMARY KEY (USER_ID, DEPARTMENT_ID)
      return "";
    }
    StringBuffer sb = new StringBuffer();
    if (comment != null) {
      addRemark(sb, comment);
    }
    if (isPrimaryKey()) {
      sb.append("  @Id\n");
    }
    if (autoIncrement) {
      sb.append("  @GeneratedValue(strategy = GenerationType.IDENTITY)\n");
      sb.append("  @Basic(optional = false)\n");
    }
    sb.append("  @Column(name = \"").append(getName()).append("\"");
    if (isNotNull()) {
      sb.append(", nullable = false");
    }
    if (length > 0) {
      sb.append(", length = ").append(length);
    }
    sb.append(")\n");
    if (xmlTag == null) {
      sb.append("  @JsonIgnore\n");
    } else {
      sb.append("  @JsonProperty(\"");
      // sb.append(GenClassField.toCamelCase(getName()));
      sb.append(getName());
      sb.append("\")\n");
      sb.append("  @JacksonXmlProperty(localName = \"");
      sb.append(xmlTag);
      sb.append("\")\n");
    }
    sb.append("  private ").append(getJavaType(getType()));
    sb.append(" ").append(GenClassField.toCamelCase(getName())).append(";\n\n");
    return sb.toString();
  }

  public String toJavaGetSetCode() {
    if (type.toUpperCase().equals("KEY")) {
      // 排除掉複合 KEY 的 sql，如：  PRIMARY KEY (USER_ID, DEPARTMENT_ID)
      return "";
    }
    // get
    StringBuffer sb = new StringBuffer();
    addXMLTagRemark(sb, comment, xmlTag);
    sb.append("  public ");
    sb.append(GenClassField.getJavaType(type)).append(" get");
    String camelName = toCamelCase(name);
    sb.append((char) (camelName.charAt(0) - 32)).append(camelName.substring(1));
    sb.append("() {\n");
    sb.append("    return ").append(camelName).append(";\n");
    sb.append("  }\n\n");

    // set
    addXMLTagRemark(sb, comment, xmlTag);
    // test xml tag and json
    // if (xmlTag != null) {
    // sb.append(" @JsonProperty(\"");
    // sb.append(xmlTag);
    // sb.append("\")\n");
    // }
    sb.append("  public void");
    sb.append(" set");
    sb.append((char) (camelName.charAt(0) - 32)).append(camelName.substring(1));
    sb.append("(").append(getJavaType(type));
    sb.append(" ").append(name).append(") {\n");
    sb.append("    ").append(camelName).append(" = ").append(name).append(";\n  }\n\n");

    return sb.toString();
  }

  public static void addXMLTagRemark(StringBuffer sb, String remark, String xmlTag) {
    if (remark == null) {
      return;
    }
    String s = remark;
    if (xmlTag != null) {
      s = "<" + xmlTag + "> " + remark;
    }
    addRemark(sb, s);
  }

  public static void addRemark(StringBuffer sb, String remark) {
    sb.append("  /**\n");
    sb.append("   * ");
    sb.append(remark).append("\n");
    sb.append("   */\n");
  }

  public static GenClassFieldXMLTag sqlToClass(String s) {
    GenClassFieldXMLTag result = new GenClassFieldXMLTag();
    String sql = s.trim().toUpperCase();
    if (sql.indexOf("NOT NULL") > -1) {
      result.setNotNull(true);
    }
    if (sql.indexOf("PRIMARY KEY") > -1) {
      result.setPrimaryKey(true);
    }
    if (sql.indexOf("GENERATED BY DEFAULT") > -1 || sql.indexOf("AUTO_INCREMENT") > -1) {
      result.setAutoIncrement(true);
    }
    if (sql.length() < 1) {
      return null;
    }
    String[] ss = sql.trim().split(" ");
    if (")".equals(ss[0]) || ss.length == 1) {
      return null;
    }
    //System.out.println("sql=" + sql + ", length=" + ss.length);
    result.setName(ss[0]);
    result.retrieveTypeStringAndLength(ss[1]);
    int commentIndex = 0;
    StringBuffer commentSB = null;
    for (int i = 2; i < ss.length; i++) {
      if (ss[i].toUpperCase().equals("COMMENT")) {
        commentIndex = i + 1;
        commentSB = new StringBuffer(ss[i + 1]);
      } else if (commentIndex > 0) {
        if ((i + 1) < ss.length) {
          commentSB.append(" ").append(ss[i + 1]);
          if (ss[i + 1].indexOf('\'') > -1) {
            commentIndex = -1;
          }
        }
      }
    }

    if (commentSB != null) {
      // 去掉 '
      if (commentSB.charAt(0) == '\'') {
        commentSB.deleteCharAt(0);
      }
      String commentRaw = commentSB.toString().trim();
      int index = commentRaw.indexOf('<');
      if (index > -1 && commentRaw.charAt(index + 1) != '=' && commentRaw.indexOf('>') > index) {
        // 有 XML　tag, 會轉成全大寫，所以要拿原始資料
        index = s.toUpperCase().indexOf(commentRaw) + index;
        int endIndex = commentRaw.indexOf('>');
        result.setXmlTag(s.substring(index + 1, index + endIndex));
        if (commentIndex+1 >= ss.length) {
          // XML tag後無空格，直接加說明
          commentRaw = commentRaw.substring(endIndex);
        } else {
          // XML tag後有空格才加說明
          commentRaw = ss[commentIndex + 1].trim();
        }
        index = commentRaw.indexOf('\'');
        if (index > 0) {
          result.setComment(commentRaw.substring(0, index));
        }
      } else {
        index = commentRaw.indexOf('\'');
        if (index > 0) {
          result.setComment(commentRaw.substring(0, index));
        }
      }
    }
    return result;
  }

  public void retrieveTypeStringAndLength(String s) {
    int index = s.indexOf('(');
    if (index < 0) {
      type = s;
    } else {
      type = s.substring(0, index).trim();
      if ("VARCHAR".equals(type.toUpperCase()) || "NVARCHAR".equals(type.toUpperCase())) {
        String len = s.substring(index + 1);
        int endIndex = len.indexOf(')');
        length = Integer.parseInt(len.substring(0, endIndex).trim());
      }
    }
  }
}
